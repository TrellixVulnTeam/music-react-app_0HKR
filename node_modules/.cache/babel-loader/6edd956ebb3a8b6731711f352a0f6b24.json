{"ast":null,"code":"var _jsxFileName = \"/home/samsung/Documents/music-app-react/src/components/librarySong.js\";\nimport React from 'react';\nimport '../style/_library.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LibrarySong = ({\n  isPlaying,\n  song,\n  songs,\n  setCurrentSong,\n  audioRef,\n  id\n}) => {\n  const SelectSongHandler = () => {\n    const selectedSong = songs.filter(state => state.id === id);\n    const newSongs = songs.map(song => {\n      if (song.id === id) {\n        return;\n      }\n    });\n    setCurrentSong(selectedSong[0]);\n\n    if (isPlaying) {\n      const playPromise = audioRef.current.play();\n\n      if (playPromise !== undefined) {\n        playPromise.then(audio => {\n          audioRef.current.play();\n        });\n      }\n    }\n\n    audioRef.current.play();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: SelectSongHandler,\n    className: `song-holder ${song.active ? 'selected' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: song.cover,\n      alt: song.name,\n      className: \"library-img\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"songName\",\n        children: [\" \", song.name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: song.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 13\n  }, this);\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["/home/samsung/Documents/music-app-react/src/components/librarySong.js"],"names":["React","LibrarySong","isPlaying","song","songs","setCurrentSong","audioRef","id","SelectSongHandler","selectedSong","filter","state","newSongs","map","playPromise","current","play","undefined","then","audio","active","cover","name","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP;;;AACA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA,KAAlB;AAAyBC,EAAAA,cAAzB;AAAyCC,EAAAA,QAAzC;AAAmDC,EAAAA;AAAnD,CAAD,KAA4D;AAC5E,QAAMC,iBAAiB,GAAG,MAAM;AAC5B,UAAMC,YAAY,GAAGL,KAAK,CAACM,MAAN,CAAcC,KAAD,IAAWA,KAAK,CAACJ,EAAN,KAAaA,EAArC,CAArB;AACA,UAAMK,QAAQ,GAAGR,KAAK,CAACS,GAAN,CAAWV,IAAD,IAAU;AACjC,UAAIA,IAAI,CAACI,EAAL,KAAYA,EAAhB,EAAoB;AAChB;AACH;AACJ,KAJgB,CAAjB;AAKAF,IAAAA,cAAc,CAACI,YAAY,CAAC,CAAD,CAAb,CAAd;;AACA,QAAIP,SAAJ,EAAe;AACX,YAAMY,WAAW,GAAGR,QAAQ,CAACS,OAAT,CAAiBC,IAAjB,EAApB;;AACA,UAAIF,WAAW,KAAKG,SAApB,EAA+B;AAC3BH,QAAAA,WAAW,CAACI,IAAZ,CAAkBC,KAAD,IAAW;AACxBb,UAAAA,QAAQ,CAACS,OAAT,CAAiBC,IAAjB;AACH,SAFD;AAGH;AACJ;;AACDV,IAAAA,QAAQ,CAACS,OAAT,CAAiBC,IAAjB;AACH,GAjBD;;AAkBA,sBACQ;AAAK,IAAA,OAAO,EAAER,iBAAd;AAAiC,IAAA,SAAS,EAAG,eAAcL,IAAI,CAACiB,MAAL,GAAc,UAAd,GAA2B,EAAG,EAAzF;AAAA,4BACI;AAAK,MAAA,GAAG,EAAEjB,IAAI,CAACkB,KAAf;AAAsB,MAAA,GAAG,EAAElB,IAAI,CAACmB,IAAhC;AAAsC,MAAA,SAAS,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,UAAd;AAAA,wBAA4BnB,IAAI,CAACmB,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAKnB,IAAI,CAACoB;AAAV;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADR;AASH,CA5BD;;KAAMtB,W;AA8BN,eAAeA,WAAf","sourcesContent":["import React from 'react'\nimport '../style/_library.scss'\nconst LibrarySong = ({isPlaying, song, songs, setCurrentSong, audioRef, id}) => {\n    const SelectSongHandler = () => {\n        const selectedSong = songs.filter((state) => state.id === id)\n        const newSongs = songs.map((song) => {\n            if (song.id === id) {\n                return\n            }\n        })\n        setCurrentSong(selectedSong[0])\n        if (isPlaying) {\n            const playPromise = audioRef.current.play()\n            if (playPromise !== undefined) {\n                playPromise.then((audio) => {\n                    audioRef.current.play()\n                })\n            }\n        }\n        audioRef.current.play()\n    }\n    return (\n            <div onClick={SelectSongHandler} className={`song-holder ${song.active ? 'selected' : ''}`}>\n                <img src={song.cover} alt={song.name} className=\"library-img\" />\n                <div className=\"song-info\">\n                    <h3 className=\"songName\" > {song.name} </h3>\n                    <h4>{song.artist}</h4>\n                </div>\n            </div>\n    )\n}\n\nexport default LibrarySong\n"]},"metadata":{},"sourceType":"module"}