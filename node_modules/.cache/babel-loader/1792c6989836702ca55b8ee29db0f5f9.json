{"ast":null,"code":"var _jsxFileName = \"/home/samsung/Documents/music-app-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport Player from \"./components/player\";\nimport Music from \"./components/song\";\nimport Library from \"./components/library\";\nimport Nav from \"./components/nav\";\nimport data from './utils';\nimport \"./style/app.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[2]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [libraryStatus, setLibraryStatus] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0\n  });\n\n  const songInfoHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration\n    });\n  };\n\n  const audioRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      setLibraryStatus: setLibraryStatus,\n      libraryStatus: libraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Music, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      audioRef: audioRef,\n      currentSong: currentSong,\n      setIsPlaying: setIsPlaying,\n      setSongInfo: setSongInfo,\n      songInfo: songInfo,\n      isPlaying: isPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      songs: songs,\n      setSongs: setSongs,\n      isPlaying: isPlaying,\n      libraryStatus: libraryStatus,\n      audioRef: audioRef,\n      setCurrentSong: setCurrentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onTimeUpdate: songInfoHandler,\n      onLoadedMetadata: songInfoHandler,\n      src: currentSong.audio,\n      ref: audioRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"SZPEtObYja7bYCoT9lApe48+GE4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/samsung/Documents/music-app-react/src/App.js"],"names":["React","useState","useRef","Player","Music","Library","Nav","data","App","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","libraryStatus","setLibraryStatus","songInfo","setSongInfo","currentTime","duration","songInfoHandler","e","current","target","audioRef","audio"],"mappings":";;;AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,MAFF,QAGO,OAHP;AAIA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAO,kBAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAAEC,KAAF,EAAUC,QAAV,IAAuBT,QAAQ,CAACM,IAAI,EAAL,CAArC;AACA,QAAM,CAAEI,WAAF,EAAgBC,cAAhB,IAAmCX,QAAQ,CAACQ,KAAK,CAAC,CAAD,CAAN,CAAjD;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,KAAD,CAAlD;AACI,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC;AACvCkB,IAAAA,WAAW,EAAE,CAD0B;AAEvCC,IAAAA,QAAQ,EAAE;AAF6B,GAAD,CAAxC;;AAII,QAAMC,eAAe,GAAIC,CAAD,IAAO;AAC7B,UAAMC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAASL,WAAzB;AACA,UAAMC,QAAQ,GAAGE,CAAC,CAACE,MAAF,CAASJ,QAA1B;AACAF,IAAAA,WAAW,CAAC,EACV,GAAGD,QADO;AAEVE,MAAAA,WAAW,EAAEI,OAFH;AAGVH,MAAAA;AAHU,KAAD,CAAX;AAKD,GARD;;AAUN,QAAMK,QAAQ,GAAGvB,MAAM,CAAC,IAAD,CAAvB;AAEF,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI,QAAC,GAAD;AAAK,MAAA,gBAAgB,EAAEc,gBAAvB;AAAyC,MAAA,aAAa,EAAED;AAAxD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD;AAAO,MAAA,WAAW,EAAEJ;AAApB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,MAAD;AACA,MAAA,QAAQ,EAAEc,QADV;AAEC,MAAA,WAAW,EAAId,WAFhB;AAGA,MAAA,YAAY,EAAIG,YAHhB;AAIA,MAAA,WAAW,EAAEI,WAJb;AAKA,MAAA,QAAQ,EAAED,QALV;AAMA,MAAA,SAAS,EAAIJ;AANb;AAAA;AAAA;AAAA;AAAA,YAHJ,eAWI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAIJ,KAAlB;AACA,MAAA,QAAQ,EAAEC,QADV;AAEA,MAAA,SAAS,EAAEG,SAFX;AAGA,MAAA,aAAa,EACXE,aAJF;AAMA,MAAA,QAAQ,EAAEU,QANV;AAOA,MAAA,cAAc,EAAIb;AAPlB;AAAA;AAAA;AAAA;AAAA,YAXJ,eAoBQ;AACI,MAAA,YAAY,EAAES,eADlB;AAEI,MAAA,gBAAgB,EAAEA,eAFtB;AAGI,MAAA,GAAG,EAAEV,WAAW,CAACe,KAHrB;AAII,MAAA,GAAG,EAAED;AAJT;AAAA;AAAA;AAAA;AAAA,YApBR;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD;;GAnDQjB,G;;KAAAA,G;AAoDT,eAAeA,GAAf","sourcesContent":["import React, {\n  useState,\n  useRef\n} from 'react';\nimport Player from \"./components/player\";\nimport Music from \"./components/song\";\nimport Library from \"./components/library\";\nimport Nav from \"./components/nav\";\nimport data from './utils'\nimport \"./style/app.scss\";\n\nfunction App() {\n\n  const [ songs , setSongs ] = useState(data())\n  const [ currentSong , setCurrentSong ] = useState(songs[2])\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [libraryStatus, setLibraryStatus] = useState(false)\n      const [songInfo, setSongInfo] = useState({\n        currentTime: 0,\n        duration: 0\n      })\n          const songInfoHandler = (e) => {\n            const current = e.target.currentTime\n            const duration = e.target.duration\n            setSongInfo({\n              ...songInfo,\n              currentTime: current,\n              duration\n            })\n          }\n\n    const audioRef = useRef(null)\n\n  return (\n    <div className=\"App\">\n        <Nav setLibraryStatus={setLibraryStatus} libraryStatus={libraryStatus} />\n        <Music currentSong={currentSong}/>\n        <Player\n        audioRef={audioRef}\n         currentSong = {currentSong}\n        setIsPlaying = {setIsPlaying}\n        setSongInfo={setSongInfo}\n        songInfo={songInfo}\n        isPlaying = {isPlaying}\n        />\n        <Library songs = {songs}\n        setSongs={setSongs}\n        isPlaying={isPlaying}\n        libraryStatus = {\n          libraryStatus\n        }\n        audioRef={audioRef}\n        setCurrentSong = {setCurrentSong}\n        />\n            <audio \n                onTimeUpdate={songInfoHandler}\n                onLoadedMetadata={songInfoHandler}\n                src={currentSong.audio} \n                ref={audioRef}>\n            </audio>\n    </div>\n  );\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}